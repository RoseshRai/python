import re

"""
     Skew refers to the difference between the count of guanine (G) and cytosine (C) nucleotides along a genome. It helps track whether a particular strand has more G or C at any given point.
"""


class Tasks:
    """
    Q1. Give all values of Skewi (GAGCCACCGCGATA) for i ranging from 0 to 14 as a collection of space-separated integers.

     Calculates a running total (or "skew") as you move along the DNA sequence:
        It adds 1 every time a 'G' is encountered.
        It subtracts 1 every time a 'C' is encountered.
        'A' and 'T' have no effect on the skew.
    """

    @staticmethod
    def skew(sequence: str) -> list[int]:
        skew_values: list[int] = [0]
        for i in range(1, len(sequence) + 1):
            previous_skew = skew_values[-1]
            if sequence[i - 1] == "G":
                skew_values.append(previous_skew + 1)
            elif sequence[i - 1] == "C":
                skew_values.append(previous_skew - 1)
            else:
                skew_values.append(previous_skew)
        return skew_values

    """
        The minimum skew is the point in the skew diagram where the skew value is lowest. 
        This is important because, in many bacterial genomes, the origin of replication (ori) is often found where the skew reaches its minimum.
        
         Locates the positions in the genome where the skew reaches its lowest value, which is often linked to the origin of replication in bacterial genomes.
    """

    def minimum_skew(self, sequence: str) -> list[int]:
        skew_values: list[int] = self.skew(sequence)
        min_skew_value: int = min(skew_values)
        min_positions = [i for i, value in enumerate(skew_values) if value == min_skew_value]
        return min_positions

    """
        Hamming distance 
        This is a metric used to measure the difference between two strings of equal length. It counts how many positions in the two strings have different characters.

        The number of positions at which the two strings differ.
        If the strings are not of equal length, the function returns None.
    """

    @staticmethod
    def hamming_distance(str_one: str, str_two: str) -> int:
        if len(str_one) != len(str_two):
            raise ValueError("Strings must be of equal length!")
        distance: int = 0
        for char1, char2 in zip(str_one, str_two):
            if char1 != char2:
                distance += 1
        return distance

    """
        Approximate Pattern matching 
            Finding patterns (or substrings) in a larger text, but with a certain number of mismatches allowed. 
            This is useful when you're searching for a pattern that may not exactly match, but is close enough — for example, in DNA sequences where mutations or errors can occur.
        
        Find all starting positions where the pattern appears in the text with at most 'max_mismatches'.  
    """

    def approximate_pattern(self, pattern: str, text: str, max_mismatches: int) -> list[int]:
        pattern_length: int = len(pattern)
        text_length: int = len(text)
        positions = []

        for i in range(text_length - pattern_length + 1):
            substring: str = text[i : i + pattern_length]
            distance: int = self.hamming_distance(pattern, substring)
            if distance <= max_mismatches:
                positions.append(i)

        return positions

    """
        Count with mismatches 
            Compute the number of times 'pattern' appears in 'text' with at most 'd' mismatches.
    """

    def count_with_mismatches(self, text: str, pattern: str, d: int) -> int:
        pattern_length: int = len(pattern)
        text_length = len(text)
        count: int = 0

        for i in range(text_length - pattern_length + 1):
            substring: str = text[i : i + pattern_length]
            distance: int = self.hamming_distance(pattern, substring)

            if distance <= d:
                count += 1

        return count

    """
        Approximate Pattern Count 
        Count how many times 'pattern' appears in 'text' with at most 'd' mismatches.
        
        Implement this Pseudo code:
           ApproximatePatternCount(Text, Pattern, d)
                count ← 0
                for i ← 0 to |Text| − |Pattern|
                    Pattern′ ← Text(i , |Pattern|)
                   if HammingDistance(Pattern, Pattern′) ≤ d
                        count ← count + 1
                return count
    """

    def approximate_pattern_count(self, text: str, pattern: str, d: int) -> int:
        count: int = 0
        pattern_length: int = len(pattern)

        for i in range(len(text) - pattern_length + 1):
            substring: str = text[i : i + pattern_length]
            if self.hamming_distance(pattern, substring) <= d:
                count += 1
        return count

    """
        Frequent words with mis matches 
        This algorithm is used to find frequent patterns (k-mers) in sequences (like DNA) that occur with up to d mismatches. It's particularly useful in:
            Identifying common motifs in DNA, even with mutations (e.g., regulatory elements like DnaA boxes).
            Text Mining: Finding frequent, approximate patterns in large text datasets with small variations.
            Data Cleanup: Detecting similar but non-identical entries in databases, improving data deduplication.
            Search Optimization: Enabling efficient approximate search in noisy or varied datasets.
        
        
        Implement this Pseudo code:
        
        FrequentWordsWithMismatches(Text, k, d)
            Patterns ← an array of strings of length 0
            freqMap ← empty map
            n ← |Text|
            for i ← 0 to n - k
                Pattern ← Text(i, k)
                neighborhood ← Neighbors(Pattern, d)
                for j ← 0 to |neighborhood| - 1
                    neighbor ← neighborhood[j]
                    if freqMap[neighbor] doesn't exist
                        freqMap[neighbor] ← 1
                    else
                        freqMap[neighbor] ← freqMap[neighbor] + 1
            m ← MaxMap(freqMap)
            for every key Pattern in freqMap
                if freqMap[Pattern] = m
                    append Pattern to Patterns
            return Patterns
    """

    """
    Generate all strings that are within Hamming distance d from the given pattern.
    """

    @staticmethod
    def neighbors(pattern: str, d: int) -> list:
        if d == 0:
            return [pattern]
        if len(pattern) == 0:
            return []

        nucleotides: list[str] = ["A", "C", "G", "T"]
        neighborhood = []

        def recursive_neighbors(prefix, suffix, mismatches_left):
            if len(suffix) == 0:
                neighborhood.append(prefix)
                return

            first_char = suffix[0]
            rest = suffix[1:]

            recursive_neighbors(prefix + first_char, rest, mismatches_left)

            if mismatches_left > 0:
                for nucleotide in nucleotides:
                    if nucleotide != first_char:
                        recursive_neighbors(prefix + nucleotide, rest, mismatches_left - 1)

        recursive_neighbors("", pattern, d)
        return neighborhood

    """
    Find all k-mers in text with up to d mismatches that appear most frequently.
    """

    def frequent_words_with_mismatches(self, text: str, k: int, d: int) -> list:
        freq_map = {}
        n: int = len(text)

        for i in range(n - k + 1):
            pattern = text[i : i + k]
            neighborhood = self.neighbors(pattern, d)

            for neighbor in neighborhood:
                if neighbor not in freq_map:
                    freq_map[neighbor] = 1
                else:
                    freq_map[neighbor] += 1

        max_count = max(freq_map.values())
        patterns = [pattern for pattern, count in freq_map.items() if count == max_count]

        return patterns

    """
        Compute the reverse complement of a DNA string.
    """

    @staticmethod
    def reverse_complement(pattern: str) -> str:
        complement = {"A": "T", "T": "A", "C": "G", "G": "C"}
        return "".join([complement[base] for base in reversed(pattern)])

    """
        Find the most frequent k-mers with mismatches and their reverse complements in a given DNA string.
        method finds the most frequent k-mers (substrings of length k) in a DNA string, accounting for both mismatches (up to d differences) and reverse complements. 
        It does this by generating all possible k-mers with mismatches and their reverse complements, counting their occurrences, and returning those that appear most frequently.
        
        This method is crucial in bioinformatics for identifying regulatory motifs in DNA that may not appear exactly but are biologically significant. 
        By considering mismatches and reverse complements, it captures patterns that account for genetic mutations or sequence variations, which are common in real biological data. 
    
    """

    def frequent_words_with_mismatches_and_reverse_complements(self, text: str, k: int, d: int) -> list:
        freq_map = {}
        n = len(text)

        for i in range(n - k + 1):
            pattern = text[i : i + k]
            pattern_rc = self.reverse_complement(pattern)

            neighborhood = self.neighbors(pattern, d)
            neighborhood_rc = self.neighbors(pattern_rc, d)

            for neighbor in neighborhood:
                if neighbor not in freq_map:
                    freq_map[neighbor] = 0
                freq_map[neighbor] += 1

            for neighbor_rc in neighborhood_rc:
                if neighbor_rc not in freq_map:
                    freq_map[neighbor_rc] = 0
                freq_map[neighbor_rc] += 1

        max_count = max(freq_map.values())

        patterns = [pattern for pattern, count in freq_map.items() if count == max_count]

        return patterns

    @staticmethod
    def find_dnaa_box(genome_sequence: str, pattern: str) -> list[tuple[int, int, str]]:
        matches = [(m.start(), m.end(), m.group()) for m in re.finditer(pattern, genome_sequence)]
        return matches

    """
        Immediate Neighbours 
            ImmediateNeighbors(Pattern)
                Neighborhood ← the set consisting of single string Pattern
                for i = 1 to |Pattern|
                    symbol ← i-th nucleotide of Pattern
                    for each nucleotide x different from symbol
                        Neighbor ← Pattern with the i-th nucleotide substituted by x
                        add Neighbor to Neighborhood
                return Neighborhood
    """

    @staticmethod
    def immediate_neighbors(pattern: str) -> set[str]:
        """Generate the immediate neighbors of a given DNA pattern."""
        neighborhood: set[str] = {pattern}

        nucleotides = ["A", "C", "G", "T"]

        for i in range(len(pattern)):
            symbol: str = pattern[i]

            for nucleotide in nucleotides:
                if nucleotide != symbol:
                    neighbor = pattern[:i] + nucleotide + pattern[i + 1 :]
                    neighborhood.add(neighbor)

        return neighborhood


if __name__ == "__main__":
    init_tasks = Tasks()
    # print(init_tasks.skew("GAGCCACCGCGATA"))
    # print(init_tasks.minimum_skew("GCATACACTTCCCAGTAGGTACTG"))
    # print(init_tasks.hamming_distance("CAGAAAGGAAGGTCCCCATACACCGACGCACCAGTTTA", "CACGCCGTATGCATAAACGAGCCGCACGAACCAGAGAG"))
    # print(" ".join(map(str, init_tasks.approximate_pattern("AACTCAACCA", "ATCGGATTCACAGTCGGTAGAAACCCAGACCCTATCCTTGTACCGTTCAGTGAGTCCTCTTTTGGATAGAGTCTCGCATAATGCAGAAGAACCTGCGATTCTCCCAGGAATTGAGCCTTCTTGATAGAGCTGTTCTCTGACGTTCTTCTATAGCAGTGCGTATAGTATTGAAACGTGCACGGACCAGCATGTCAACGAAATCCCCATCTTAGCGATGGTTTGCTCTAACAACAGCACGTTGGTACCATCGAAATCTCCAGAGCGAGGGGTGGTGAATCGAAGCAATCACGAGGCGACAACGGGGGAAAATAGCGTGACTCGCTGTGACGTAGTCAGTCCCGACCGCCGCGATTCCCGCAGCCTCATAACCTGCAATTGTACTGTAGGACGATGACGAAGCCAACTCATTACACTTCACCTAGCATGATCCCGTTTAGATCCTGCAATCAAACGTAAGCACATGCCTCCACGGGTTGTGTTGTAAACGACCTACTTGATGACTTTTTTATTTGGCGGGAGCTACTACACCAAACAGGCGGATGAAAAAACGCACCCGGCCACGAAGTAAATTTTGCTTTGTTGTTTATTCTGAGATACTCGACTCTGATCATGTTACATTTCTGAACCAGTCGTACTCTCTTAGATCACAGACGTCTGTACAAACTGGGTTTAGTACCCCCCACCATAGTACAGATTTGTTAACGGGGCACTGCAGGACGAGCTACCAGTCGGATCGTGATAATGGCAAGACCACTTGTCGTCCTGCAGCGCGCAGCGTAACCCCCTGGTGGACGCTCAACGATTCTATAAGCATTTTGGTCTCAGTCAGCTCCAAAGGTGCAAGCTTCATAGACTGGCAGCCTTACACTGGGACGAAGTGTGGGTAACTGTTAACACGTTTTTCTCGTGTTATCCGTCCAAGACCGGAGTAGGAACGGACCAGGCTAAGTCTGCCATCCTAACTTCCACCGGTCTATACAGCGACGCATTTCTGTACGTTGTGCTTTGTGCATGTGGGTAGGATTATTGCTGTGACAATGCCCTTTGTCTCCTTTCTCTTACTATATGTTCCTAGTAAATTTTTTCGCGGAACGCCCTGGACGGCTGACAGTGCAGCTGCTCCGGAATTGTCGTGCCGCCCGAGAAGGGCGCCGCCGTACGCGAACCGCGATTATTCTGTCATTTCGCCACACAACATAAGAGTGGTTTTAACCATTGGTTTCACTTCTAATGCTGACAGCGAGTATACCCACGAGCTCTTAGTTCCTAATTCGGTGGGCACATCAGGCCAAGGAGGTGGAGTCCGTGCATTGATAGCTCTTGAGGCAGCACGGGGGTTTTTTCTTGAGCTGAGGGTCCGTTTAAAAGAATAATTAGCCGCGATTAAACAGCAGGGAGTCTCGTAACGTCAAGAGTCGTAACTCTTGAGAAAAAAATGCTTTGAGACAACATTATAAAATCAATGCATACAGGTCAATCGTCGTCGGTGCTCGTTTGCCATTTCGACAAGAGTCTCACATGGCCTCTTCACCGTCCAATCAGCACTATGGAGGAAACAACAACTTGGGCCCGACACTAGCGAAGGAGGTCGATAGTCTTCCGAGTACTATACCTCACATCAGTTCCGCTCCTCCCACCAAAGCATGCTCTGACCGCAGAATCGAATAGTCTCATCCGACTTCCATACTCAGATGATGCTGATCTAAAGCGCGGCTGCAAGATACGCCGGTTTCTTTGGTAGACGACTATTTGACACACGTCTGGCGCCACTATGCGCTTGTTACTTCTCCAGTGCGGCGCTATGTTATTAACGCCATCCTCGTGATGTCAGGCGTGCCAGCACCAAACGAGGGTTACTCCTTAGTTGGTTCGAAGAGAAGGGGGAACAGACAGGAGTAATGTACTTGCGAAGTCTCTGACGGTCCAAGTGTTCATCGTTGGCCGGAGAGAATACAATCTCCGTTGGCAAGTTTAGTGTCCCTCAGAAAAGACCTCGAGTAGGGGCCTTACCAGTTTGGCGTGCCCTAACTCCTCACTGAATCCGCGATCATTAACGCCTACCGTGGAGAGCACCCTGACTGTATCGTAAACGTCCGAAACAGTCTATCGTAGAGCTTGCTGGCGGGCAAGGATACTGTAATTCCACGCGACGTAAAGCCGAGCGAGAGGGCCGACGGTCGACAAACTGGGACCACGTCCTGGGAATTAATACGAAACGTAGCAGGCCCGGGACGGCATCAGTTTGTTCTACGTAGTTGCTTAGGTTGCGTACAAAGGCCGTGGAAGGACGGGCGCGTTCTGCATATGTTGGAAGCAATTAATTGGTAGCAGCACTAAATTACAGGCCGTAAGTTCGGCTACCTGGTGTCCTACGCTAGCCTCATGCCTAAGAACTATAGGAAGCAGGATGGCAGACGGGGTGGGTAAGACGGCCCCTACAGAGACCATTGCATGGGTATCCACCACCATTGTCGCAAAATCCGGGACTTCGATACTGTCCCGCTCCCGTGATGTCCGGAGTTCACCCCGAGCGCAGTGGTGTCAACGCTCTTGACGCAAGAGGGTTCCAGTTGCTGCATCGCGGGGTACTGGCGTAATAATATTGATTACGGGTTTACAGCGGCGGCGGAGGACCTCAGATTTGAGGAAGTTTGGCCAATACCCTTCTTCGTCGCGCCTCAGTCGCTGAGGGGTACCGCACCTCCACGTGCGAGAGGTGGGCCTGTTATAAGCCGTCTCTATATCAATATTTTACGCCGTAATCTGCAACGAAACGAGATTATTAGAGACAGCGCTTTTTTCCCTGGATACGAACGCAAGCGTGACACTTGAAAAACCGTCGTCAAGCGAGGATCGGCTCCGTTGGCTCACTAGAGAATTGCGTTGCTCCAGATGAGAAGGGATTCAAACTGCACACCTCGACGTGATGGCCAAAGTGGTGACATGCCCGCGGCTGAAGATTAAGCCTGGTACGTAACCACGGTAGGCGTAGATGTCGCTAGATGCGTACCGATGCGCCGGTTTCCTGGTTTATGGTACCGAGGGAAAAGACATCTAAAAGTAAGTGGGGAATCAGTCACACAGAGATACAATGTTCGAACAGCGGTAGACCCAGAAGGTTCTTGCCGCACTAGACTACCGCTATGAATTCACCATATGAATAGCCGATATAGTGATCCTTGTTCTCGAGGAGTCAAGGGCAGGTTAGAAACGGGGCATAGCATGCGTTCATAGGAGGGGCTTTGACGGCGCGCTGAGTACATGGTCATAACTTTGAAGTGCCAAAAGCCTCAGCCACATTTTGATCCCCGACCGCAAACCGAGTAACAGACTGACTGATTATCCTGAGCTGATAGAATTCGGAACAAGAAGGCAAAGGTCTTCTAATGGAGTTGATCCCGCGTCCTTAACGTTTCCCCGGGTGAATAAGTCTCTTCTATCACGGAAGGCGTCTGTGACGGTAGAAGGACTGGTCGTGGAAGCCATCAGAATCTGCGTGCAACGGACTGGCTTACACTGCCAGGAGTTGATTGCTGCCTCCCAAACGGAGGCACCACATGACGATAAACCGCGACCATACCCCTGAGCTTATGGTCTCAATGTAGAGAAGTCAGAAATTACTAAGTTAGGTATGCTTCAACACCTCTAATGTGGCAATTTTTAGTAAATTTCTTCTAGACCCAGGATGCCCCCCCGAAGATGACAGGTATCTTTTGTTGGGCCATGGTATCACATAACGGTCGAGTGCCATTAGCTTTGAGAAAGATTTGCATATCCAATGAGCTCTCTAACCAGTCGGGCGGCAGCAGTGATCTACTCGAAGGCATCGGCATATATTGCGTGCTCCGAGGATGGACGGTAGGCTGGCGGGGTAGTGACTAGTGGTACATCATGTAATAGGCGTTCAATCCGGGTGGCAGGGTACCAAACATAAGTCCTAGGTCATAGAAAACGGGTGTGACGCAATAAAACCATTCGCCTTAGGTCGGAGTGCTACGCCTCTGTCCTCCATCCCTGCCTTGTCGGCCATCATGCTTTCGCGAGTAGTACTCTCAGTTAAAGGCCCGAAGACCGAGATCAAACCGGCCGGCTGGATATCGGCCTGATCTGCATCTGGAAAGACTGACTGTGATGGAATGAGAAACTCGAACTAGTGGAAGGATTCCTGTCATGTATATCTTAAACCACACCAACGTTACGAACCCACTACATACTCCGTAACCATAGAAGCCGGCTGGCTCTGCGAACGGATCCTCGTCGGTAGGCTCGAGTGTAACCACACCGGAGCTCGGAATTAGAAATCTAACACTCTGATAAGCGTTTAGTCGTACGGCGCTCCAGGACTGACCGGGAGGTCCAGTTGTAATCTACTAAATATGGTAGTGACCAATTTTGAAACCCGTCACGACCAACCTTGCGAATGCCCATGAACACGGAGCTACCATAATCCTTATAGCAGGTTTGGCGGTCCACGCAATGATACCGTTCATAGCAAAAGCAATTACAGCGGTGGCCTCAGGGCGAATGTCAAGCATCACAATTTGCGAGCTAGAGGCCCACGTGTATGTTCATTTTGTCGCGTTACCACGCAAAGCTCATTTTTCCTGCGCTTAAATTGCAATCAAGGAGTTGTGTCCAAATGGATAATTTCGTTTCACTGATGTCCCATCTGACACCCTCCGGCCAACCACTAGAACCACTTACAGAAGTCATACGCCCTTGCACGGGTCGACCATGTTCCGACAAGATAACACGAAGACAAAAGATTATTGAGTCGGGGTCGAGAGTTGGACGAAACCTGCGAACGTTGGAAGTTCGAATGTGTTTACTGATTGACCACCTGTATAACCTCCAGTTCACAAAGGTTGCTGGGCGGCCATGTGTCTGCGTCACTGCTGGTGGAATAGGCACACACAGGAGCTATTGCGTGTGCGATTCGTACATTGGTATCGATTAGGCACGGCGCCTCATACCGGTCGGTCAGGATTCGTTCAAACAGCCATGGACGGGAGTGGTAACATACAGAGGCCGATTTTGCTAACAGGGACGCCACACCGAGCTGTTTGACTTTCAGCATGTTGATGGCACGACCGCCGTAGGAGTGATGAGCACATCTCATAATTCAGATGGCATGTTGCGGCAGTAGGTAGGGTACCAGCATGTTAGACTTATCGATCTGGTATGGGTACAGCCCCACCTGTCATGCATTTTAGCTTTGCACATGGGACAATGACGGCATCTTGCATAGCAACTCAATGCGCTGTCTGCTTAGATGCGAGGCAGACCCCCTGGGAGTGTCGACTAATTTAAATCCCCTCATGGGTATCCCAAAACGCACTTCGTAACTATAGCGAGTGGGGCCAACGTCTCTCGGATCCTACCTGTAGTATCGCACACTGGCTCAGGTCTGCCTTTCGGTCCCCCAAGGTCGTGGTGAACTACGGTCCCCTAGTCTCCGCTTGGTGTCTAATCAAGCCTGCAAGAGCAACAACTGGCTTTACCTGCGGTTGACGAGTAACTCAGTGACCCCCACGCATAGCCGTATAACGGCTGGAGTGACCGTTCCGAAACCGGTCAACTTATCTTGAATCCTGTCAACCTGTCCAAGCCGTTGCCAGGGGTAGCCGAAGGGCCACCAATGGTACGGTCTGATACCTGGGAAGAAGTGGCGTTGTTCTACCACGCCCCTCCCCTTGACCTGACGGGCTAATTGACCTCGTGTCTTAGTTCGTATTGATACGCTACCGCCATCGCTTCTGCTAGTATGTGAAGGACGGACGGTTTCCCATTCGCGTATCGCGCCGCTCTGTTCGGCAGGCGTACCTTTCAGCCGGACGTACTCGGAGGGTAATGACTGGGGGACGCGATGGAGCTGCTCGGGCACACCGTGCTAAACTTGCTCACAGGATGAGAAGCCTTCTGGGATTCCACGTGATCCGGGGCAGTGAATTAGGCAGTTGATCTTGTGAGTATCTTTCACGAACTGCCATAAGGGACGGATGAAAGTTCGTGGACCCTCATGTAGACGCCCCACTCAGCTGGTTAACGCTCTATTTTCATCAAGGGGGGCCCCCTCTTCGATCCCTCCGTATCCTACCCTATCGCTCGGTCCGATCCTGAGATATGGAGTTGGTTGTAACTAATTACGGGGATCGGATAGGACTTGCACCAGAACACAAGTTATCCTTGGTAGAATGACCTGTTCGCGGTCCGAATCACGCCCAATGCTCAGCCGTGTGCCTTGGTATTCTCAGGGGGCTGTGGCAGAGGATGCCACCAACCTCACCACCTAAGTCATTAGAGTAGGCTCTGTTCCCGTCTCCCTACTTAATAAGCGAGGATTGGAGGATCATGCAGGCAGTGGTTCGAATCAGACCATAACGAATATCATCCACTCCTAACATACAGACTTACTGCACTTTAAATAGTTATTAGCACACGGAACGTAAACACCATGCACCGACTCGTAGACACTGTTCTCCTTCCTACATATGTCGCGCTCAAACTGGCGGTCTAGGATTCTGGGTCTTTTTAGTTCTGTGGTATTCGCAAGGACACTAATGGCCGCTGACCGAGGCACGCAATTGGCCCGCGTTTTCTTAAAATAGCGGCGTGCTATCACGCCCAAACTCGACAATATTATATTTGAATGACGTACTATTGAAAAAAACTGGGTGAGCCAAACTATCGCAAAGACGAGTACGCTGACAGAACATACGCTTCACCACTTTGTTTTGAGCAGCCGTATAATCCCGCAAGTGATACCCTGAGTTCCACCGCTGATTTTAGCGCGTCGTGGTGCTTGATTCTGTGTCATCTCCCGTGCCTACCTACGCAGTCACGTCCTGGGTGGCAGTGTCCAGGATTCTTCTGAGCCACTCAGTGCTAATTAACAGGCCGTAACAACACATTGGGGGCCACGAGGCTATTGAGCCGGGCCCTTGACGCACATCTCTAGGGGGAGAAGAACGCAGGCATCGCGCTACCGGCCGAGGCAGCGTGCTTAGCATGTCAGTATTTCATAACACGGCAGAACGGGTCCTGGCTAACTTTGTAAATAGCCGTCCGTATCTCGCTTGAAGTAGGCATTGGAGGTCAGTCTGCGGTAGCACTAGGTGCTGGGTTACCACACGTTCGTGCGAATGAGCCCTATGGTGTAGAAACAAGTAGTAGTATGCCTAAAGGCAATCCCCACGATCTGCAAGCCTTTTCGAACAACTATTGAAGTTCAGACGCCGCGAGAGGGGGCGTTTTTATCCTGGGCCAATTGACGAGGCGAGAGTATTACACTAGTTGCCAGTGGGTGCTACAGTCTCTGGGCACAGCTTGTCACTTTAAGAACAGTGTCAGTAACCTATTGCGTTGGAAGCTCTGTAGAGAAGGTGGCCCTCTTTTGATTGGCCGATGGCCAAATACCCATATGAACACGACTTTCAGAATGTCATTTGCATATATCTTTGTATCTAAGGTCGTAGCCGAAAATTGATTATACCGATCTAACACGGTAAGCAATGCAAACGGAAACCCGTTATGAATTTCGGTTTTCCGGAAAAGTTTTCCCTTAAGATTAAGGACCACAAACAAGCACACGAACCAATGGCTGTGCGCTACCAGGCTCCGTAAGTGGCCCACAGGCACTCGAGTGTAAACAAACGGGACCTCTAAATATCCAACACTACGTTGACCCCCGGCCGATAACGCTAGCAAACTCACTAACAGATTGTCTTAGTTCCAAGTGCACACGCCCTAGTACATTAAGCCAGGGTACTTCCCGTCCGCGCAGTAGATGCCTCCAGTACGACGGGTGCAAGGAGTGCTAAGCGACTCCGAGGCGAGGGCCCATCCTAACGATAATCAAATGTGTCAAGTCCTCAAAACCGAGCCCCATGTCGTCAGAATCTCAGAGCGCACTGCTCTACAGACTAATCGTCCTGGCGGTGCACTGCTTAGTCCTACGATACTTTACGGGGTTGAAGAGACGTGTACCACGGAATTGAACTGGGAACGGCCGAAGCAACCTCGTGAGGTATTAGGTACACTTCATAACATATTTCTTCCGGCTTATACTTGTATCACCTGTACGTAGTGTGACGCCCCTTATGTTAGCGCCTAAACACCAACACTTATACTACGTCCGATGTTGCTAACTCCGGTAGCTTTTTGTTATGCCCACCTGCCGTTATCCACTCGCTGGCGTTAAGTGACATTTCCTGCAGTGATCCTCATTACCGAGTCGAGTCACTTTTTCTCTCAAGGGTCAGCTAGTATAGCGGCACAAGACCCACGAAGATCGACGGCAGTATCCATTCCGACGCGGGCTTTGTTAATGACCCGACCGAGATGCCAAAGTAAAGTCGGCGCGATCACAAATGGTTTACGACGACGCACCCGGTCGGTATAACCGCGTGGGCCCATGGTGCATCAAAGCGCCAGCGAATACCCTGAGCCCACGGCTTCATCGCTAAAACAAATACATGGGTTGTCCTACCAAGCCCATCGAATCGTTCGTAAGCGGATGTCCGGGTAATTCAATGTAGTCAGCACAATCTGAGTCCTTCATTACCTTCCAGAACCATACAACATAGCACCGATGGGTTTTCGTTATCTCAGCTGAAATGAGGGCGGGTAAGTTTACGGGTTCCCGTAATCAGTCTCTAGACGACTTCTGATAAAGATTTGTGCGTGAAATCGTTGCGAGTCAGACAGTGTTATCTCGGGGTATCCACAGGCTCTACGGTTTGCAGATGCAACGCTTACATATTAGAAACCGTATAAAGTCCGATGCTCATACCACTCCAGCCATCATTCAAGGGAGATTAGCAGAGCAACGGCGCCAAGATTTGATGCCTCGCGGTCTCTGCCTACCTGAGGAATTTCTACGCGTGGTTGCTATCGAAACTTGTTCAACGACAGATGGGCGGAAGGGCACTGATCTCCGAGAGGTTCGGTCGTAACCTTTAGACCCCCAGTACGTATATTGCAGTATGAGGTATACCTAACATGCGTCGTGACTTAAAAGGGGAGGTTTCATAGAGAGTTTATCCTCAGGGATACAATGAACTTCTGCTCTCGAAGGTGCAGCAGCGCTGTGTTGCTGTGGCTCAGTAAATCCCATGAATTAGCCGTTCCTCCTATACTGGGTCCAATAGTTCCAGTCCTGAATTACTGTTACAATGAGACGACCACGTCATCATGTAACCGAATTGGGAAACAGGATTTGGTGCTTAGCTCACATGATGTCCAGCCTTTGTGCTGGCTTGCGACACTTCTATATAATTCACCTATGCATCTGCACGCCCCACTTCAACGCTTTCCGTCCGGATTGAACGAATGCCCTGCCTGAAAGCTTTGTGTCGCTCATGGCCAGGCAGTGGCATGTTGCGCCCGTTCTGACCTTTGCGTTCTCAATTGCACCACGCATTACCACCAATGCGCCCGCAGTCGATCTTAGCATACTATCCCAGTAGGAGGACTCAGCCACCGGCTTCTTCAGTAGTTCCGGGGCCCGAGGTTGCGATTACAAAACCCTACCCCATACAGCGGGTTAGGATGCTTTTATGTAATTCTTGGTCTATGTTCTGGGGGGTGTTCTCCTAGCCTTTTCTGAGGGCGTGCGCAAGTGCACCATAGTACTTGGGGCACTCAACGTTGAAAGGAGGGCGTCGACCTAAAACTTCTTGTCATCGAATTACCTCTAGAGTTTACAAGGGGTAATGTCTTCGAATCAAACCGTCCGGCGTAGTGGTGGGACGGATACTTCTGAAACCAAGCGCCACGACTAACTTTCAAAAACTCGTGGTGCGAATTGTTAGACACTCGATACTGTCTTCCGGTCGGCTGTGCGTTATACACTAACTAAGCGTCCCCCGTCTAGGGGGGACCCAATTCCCAGCGTGTGAAGTAGCGCCTCAATTATCTAGCGCGAGCCGCTAGAGCAGACCTTACATGTTTGTGGGTCTAAACGAGATCACGTACCGGTTGTGTATGTATACCAAAAACTCGTTTGAACTTGTGAAGGTATATCGTCGATACAGTGCAAAGAGCTTCATAGGTTTATTCCGCCGGGGGTGCCGCACACCTTAGCAGAAGCATTCACCTGGGTGCACCAAATCGATGCGTAAGTATAAGACAGTCCCGACTCGATTCCTTGTCAAAAGAAGCTACCAGATTTGCCTGCATTATTGGACAGGCTGGGCTTGCCAAAACTTGAGTGGGGACTTCGACGCTGTAAACTATGCGAAATCTACAGTCGCCATACTATAGTGCGGCGGCGCCCTCCGGGGGCTGCATAATAGCCTATACGGCAGACACAGTGAGGAGGACATTAGTCAGTAGGGAAGCATAAGAAGGTGCCAGACAAAGAACCACTGTTTAGAGACCGGCACGCAGTTCGAAGGGGGTTGCCACACCGGGAATCGGATTTCTGGAGTCCGAAGCTCGGCTTGCAGGCTCCGTGCAACTCAGTCATCGAATCGGACAATCGCTCGCGTTGTTGATCATTCATGCTTTCCTAAGCTGGCAAACTAAGTGCTAGTGCTTATGGGTGACTGGGCCAAATGAAAAGACGTCCCTACTCGTCATCAGAGTACCAGGGTGAGTTCCAGGGGTGGTTTTTTAGCGCGGTATACCCCTCAAAGTGTGAGACTCGCCAGTTACCCAACGGTAAGCCGAGGCTCCCTGTTGTATTGGGTTCGCTCTTTTAGGCGACTGCGCGTTAGTTTACACTTCCTACTGAGTCTTATATGGAGATCTCGGACGCCGAGTCGCACCCCAGGGGACTTCGGGTTGGTCCATACAGGGGACCTCTCTTCATGACGTTAAGGCCCTTTGGTCACGCCCTGAATCGCCGACAGTTTGGTCCGTGTCTCTTCCCTTGGCTTCTCGTGCAACTCCCAGTGGGGAACATTTAAGCCGCGTGGGCGACAAATGGCGTATACGCTACGGCTGGGGGATACATGGTCAATAATAGCCTCAAATTGGTGCAGACTGAAACTCTACGGGATATACGGGACCGGCGTACCCAGTTCTCTTCGGTGGACTGCTGCTCTAGAGGCTACCAACCCTCTGCGGGATCTGGCTTCTAGATCAAGGACACATTCGTAGGAGAGTATATTATTGATTAGATCAGCTATAATATCTACCCGTGGCCAGATTACTCGTTGCAACAAGATCAAGCAGCCTTCTGACGATGAAATATATGTTGCGGCCCTAAGGATAAGCGCCGTCCAGCCACAGGACTCGATGAATACTCGCTTTGTTATCGTGGGTCCGTCACTCTGTGAACGGTCCAGAACTAGGGTATGTTGAAAAAGAGCTTACGACTGTAAAAGGGATATCCGAAGATGGCACTCAAATTTGTCCACGTCCTCATTGCCTGTTGCGCCGCAAAAGCAACGAGTAGGCATCTACCATGACTTACACTCGCTGCGTGACGTCTCATACATCCCGTCCCTTAGCGGGTACCATATACTTCCTGGGCCCTGCTACCAGTTATGACCAATTAGCTAGCAATGCGTGGCGTAATCACCCGTTGTGGTGAAACCACCGTAACATCGCTTGTTAACAGAGCCCGTTCCTTGCGACCCGGTTAACGCCTGGATGGGTTACAGGAATTGCGCCAGCTTCAGGGCTACCAGTTGACGAATGCTAGCAATTACAGATTCCGATACTACGGGCAGTTCGGCAGCACGACCTCAGATTACAACCGGTATCAGTCTTTGTGGTGATGGGGAAAGGGCATGGGCTCTCTGCGGTCGGCTGGCAGATATAAGCCCGCATTTAAACAACTTCTAAGCTTTCCCGAGTAAGCAGAAAGGGCCTTGAGTGACAACGGGGGTCACTATCTTGCAAGTGCAGCGTTTCAGGCACGGCATTGGCGTAGATTGATTTGACATAGCGACTGCAATTTTAGAATCTTGTTTTGAGGGCACGGCCACAGTAGCACGTGAAAGCCAGGCCTGCTCGTGGTGCATACCTTAGTTCCAGATCGTCATACAATAAAGACTGAGCGTATCGCATAATACGGCTACCACTAATGTAGATGTATGTCTCTAGATGTCGTACAGCTGAATAGCTATTTCCTACGCTAAAAGAAGTTATCATTGCTTGGATACCTCGAATCTCCAAAGCTGCGGCCTCTACAATAAATTTAATTTAGCCCGATCCTAGCCAGCCATTCGTTGAAATGGAGCCAGTGCACAATATTACCCGACGACCTATGGAAGGCAGGGAGACGCCAGACGGCGGCCGTGCCAGTTTGGAAACCCCTGCAAAAGCTTTCACCTCATTGGTAAGCCATACTGCTTAAAAATAAGCAACTTTTAATAGCTGGACGCCTAGCTTGTCCTGGGCTTTCTTGAATTCGAGGTCAGCATACGAAGTGTAGGTTCAATACCACATCACCGATGTAACGTTAATTCAGAAGTATGCCTCTTTTTGTGTACCCATATAGCTGGCAGCCCGGCACCATAACGGCGCTCCGCGACGTCGCAGGAAGGCCTAATAAGGAAGACACAGGATATATCTAAGAGATCGACGGTCTACCATCCTTTGATGCGTCGGGTAATCGGTACTGTGACAGACGTCAGGACCACCAGTTTCGTTCCGATGCGAGCATTAGGTTGTTGCGTCGAAACTAGTCATTCCGCATAACGGTACTTTGCCTAGGCCCCTTAGGCGAAATCGCTTCGGAGACGATGAGCTCTAGTTCGGAATAGATACAACGAGTGGGCACTACGAGTTTGATGACTCACTCGTGAGCAGATCGTGCTAAACGTCACCTTACACATTGTCCGCCAATCCCCCTAACGATTGCCAGGCCTCATAGGGAACAGAGCCTAAGGTTCGAGGTTGTTTGGGGGAGTCAATTGCCAGAGCCTTAGGTTCGCTTTGCGGGGTAAGTAGAGCATGGAGTGACAGAGTGACGGTAACTGAAGACCGCTAAGGAACTGTCTGACGCGATTGGCCTGGCTGACATATTCCTCACGGACTCGACCGCTAGCGGCGTAGGGTTTCGCCTTCAAGGACAAGCGCTGTACGTTTGGTGCACGCAGTCTCGCTCCGCCCCGGTAACATCTGACTGGTTACAGGCCACGGAGCTGCAACGCACCTATCTAATCTCAATAAGGCGCGGAGTCTTTTGCATTAGGTTCCAACAGGTCCAGAGAATCCATTATCCCGGGGTCCCAGGAGTGACTATAACTAACGAATCTACCGGTCCTGTGACCGGCTGGAGACCACGCGATGCCCGTGTCGATAGACTGGAAGACGGTGAATGAGATTGGGGCTCCGTCTGACCTTTGTCCACGGAGTCGTTAAAGTTTGACTCCCTCCGCCAGTAGGCCGGTTCAACGACGTGGCCTTACAACTGCCGCGCTTGCGGTGCAATGAATCCCGGCGGTTCATCTGTGCGCCAGGGGACTTCACCGGGCGTACTCTCAGGAGTCGCAGGGGCTATCGTGTGACACAAGCCGTCTCCCGGTAATCCCCCAGCCCGAGATCGCCCATGGATAAGTGCAGATATAAGCTGAAGATGCGGGTGGTGTCGGTTCATCGTAGGTAGACGGATTGTACAAGTCCTTCACGTCCGCATCGGCCCGGTCTCATTACTCTCCATCCAATTCTAACTCGGCACACTACAATCTGATAAAAGTCGGGATAACCTATATGAGAATTCTCCTCCCGGCCCAAGTGTCTCAATAAGTTGATGCACGAATCTGGGGATAGGCGTTCAGCTACGATATGCATCAGGCTCCACGGAGCGCTGGAGGAGCAGTTTTAAACACTTCCCGGGCTCAACGCAAGAATTACGGCCGCCGACTAGACGCCTCCCCCCTGCTTCAACCGTTCCAGTACCATGACTTGGCATCCTACGGTGTAAGCTTGATCGAAAGGAGTTTTGCAAATTCACACTTACGCGGCCGGGGGAGATCGGATTGCCGGAATGGATGTCCCGGTAAGTCTTACAATCAAGTGGAGGGATCTCACTGGGCCCTGCCGCCTACCAGAGACATGCGCCGGTGCACTGTGTGGCTGCAAGCCCCCAATCAGGAGGTCGGCACCGGAACGCTGTCCAGTCGGTAGGTGGTTTAGCGCCGCCTGCTCGGCAGGTCGCACTACGATAGCGGGTCATCACGCGATCTGTCGGGCCTACAATCCGGCACGCGAATTACAGCCGTTGCAAGACATAAGGGTGGCGAGTGGATAGCTTCAGTAATACCACGTAAAAAGAGGCCGGTTTGATCCCTCTCAGCATCCTATACTCGTTCTTGGTGCTAGTGACCTCTCAGTCGTGGCGACTCATGGGTGTCATTCGCAGTGGGTGAGCTTCTCGCCCGGGGCTAGAGTGAATGCGCGCTTTTTGCTCCAGCAGGAAACACCCGGGCTAGCTGGCTACACCAGAAACCCTGTCGTACTCGCCTTGTAGCATCGACACGGGCAATGAATTACAATAACATGGCTCAACGGTACTCCGTACTAACCAGGCGAAGGAGCCCCTAAAGATACGTGTCCTACCCCCAGGGAGTTTCGACTGACTGGGACAAGCCCGTTGAAACCGAACGTCCTTACGCGATCTGTAGGGACTCAGAGTTGTGCGGCGTGGAGTGGGAGTGACCGTTTACTAATGATTACTTCAGCTGTGAAACCCTAAGTTAACGTAAATTCAAGAAGGGAGGCGCGTACTGCTTGTTGCCCGGCGAGCGTTACTCTGTAGGGTCTATACGCAAAGTAGAGCCCGTACGCGTTTTACGTTAGAGCGCCTCGGAACCAGCACACCCCAGAATGCACCTCAACGTCAGCAACGTTCTTTGTGGACAAACTGAGCGCTGCGAAACCTGACTTCTTAGGACACCCGTTTAATAATGTCCTACATGATAATCAGGGCGGTTTATTGAGTTTGTGCAAATCGTTAAGCGGTTTAGACTGCTCTGACCGGCATAATTTAAGTGAGGACACGGCTTGTTTTTGTGTGGTCAACCTCCGCCTTGTGGGCCCTCCAAAGGCATTAAGTTAACACTCTATCGAATTAGGCATTTGCTCTCCCTCGGTTGAGATGCCTTGACAATCTTAACGCCGATAGGACCGCCACAGAGTTTTTCAAGTCGACTCCCCTCTACTGAGTGCCAGCGTCATCGATCAACAGCGCAGTTACAGACAGTGCTGGCGTGCAAGGGCCTGAACTACACGTCAATGCAAATATCCTTTGCTTTGCCGTTATGTGCCGTGGCGTTGATATTTGACAACTTCCTCAATGACCAAAACAGCAGGGCGTGCAATAGGACTTGGCATCGCACCCTGATACAATATGAGGGCCAATATGAGCGCGTGGAACAAGGCGTACGATATACTATCAGAGCGAAAGAGACGCTGACTAACCTATTCACATGTAGGCGGGTGCAAGCGTCGCAAGTCCTTACTACCTGGCCCACATCGCCCGAGTACCCCCCCTGCGCCTGTAACTTCACGATACAGAGTCAGATCACTTTCCTGACAAACGGTTATTGGAGCGCCTAACAAGTACTGTGCCTGGGCTTCGATACAGGAAGGTCTAAACGCTTCTACACGCAAAATGCTCCCTAGAGGTGTCCCTCTGAAAGCTGACAATAGTGCCTCCACGATAACGGTTTGGAGACCGTTTTATGTTCTGAGCCTAACCACTGTCGCCTCCGTAAGCATGTAAGTGGGCCACTTGTGCCACCATATCCTAGTTGGTCACCAATCGCTTGATATCAAAGTCATTATTCCTAAAGTACTTAACCCTCGCACGTGACAGGCTGGCGCAATCGCTGGGCTCCAAGCTCAGGATAATTAACCATCCGTAAGACTGCCTAAAGAGGATGGGATCCAAGTATTCTTTCAACGCATTCGGTGGGGATCCAGACCTAGGGTCATGAAGGTCTGTCACTCTGTTCGACAATAGAGCTACGCCGCTTTGCTCCCTCAAGCACTGGCTATTCTTGCGCAATCGTACGGACCAGTATTCTCGAGGTCACAGACAACGCGTATCGGGTTCTGGCAGGACAAATAGTTCTGTAGTTCGCCCGTTCATGTTTGGAAAAGGTGCTTGGAGGTCTAAGTGAGTCCGGCCTCAACCTCTTCCCGATCTACAGGATGAATATAAATTGATAATGATCTATTTGCTAAGGTTCGTCTGACTTCTTGCTGGGTCCAACACACAACATCGTTCGTAGGTCCCGCTTTCTAGTTACAGGCACTCTTGGCTTCTTTGTACATCAGACTACCTCATAGTATCTCGGATTTCGGATATAAGGGCGATGCTTCGGAAACGAGGACAGTTTCTACCTGACCTGGCAGGTTATTAGCGCTCCCAAAAATCCAAGTAGCCATGGGGAACGTCGACATATATGGATTTCATGCGTTAGGAGAGGAACAAGGCGCCCCAGAATATTTTGCGGTGGAAGATAGATTCATTCCCCATATCGCTCGTGTATCCGATCGAAGTACACACAAAAACCTTTTCGCACAGGGGAGCTCTTAACTAAACCCGGGTCCCAGGCTGTCGAGCCCTAGCGCAATCGGGGTGTCCTCCAGTGGGTCGCAGAAACGATTGAATCGCACTTGGCCCAGCTACGATAGGCGCCGTTAATCGAGGTTGGACTCCCGCTCCACTAGGATGCGGAATCGTGCTCTGCGCAACCTAAGGATGCTTGGTTAGCGATAGTTACGAAGTTTAGGTACTCATAGCTAGGGATGCGTCCCGCCTTTTCTGTGGCTAACAGCTATTGTGCACGTAATACAGTGGTGTACTTATCACACCAAGGTGAACCGTACTGTGATCGCTGAGGACGCACACACCCATTTTCTGTGGGATTTTGGATCGTAGCGCCGCGATTTGTTCAGAATAACAGAACTGACTATAAGTTGGTACCTTATTCCTATAGGGTGAGGCTCAATTCCGTGCTACGTAATGTAGTAGGCTCCACGATCAGGACATCGCATAAATGAGGATCCGTCCGGGTCGTCCCGGGGGGGCCATATAACTTAGCCTGAAAATGAAACATAGCGGATCAACGTGAAGTCTGATCGCATTCAGCAGTGCATCTAGGTAATACGATAAGTCAACGTCCCGTCGCAAATTAGGCAATCAAAAGTCGTCAAATGGGCGGACGCGACCGGTTCAGCGGGGCTCGCGGGGATCCCGGGAATTAAGACCAGATAGGCACCGTGCATGGTCCATACGACATGACAGAATCGAATTATCGGCCGCAATAAGTTCGAACGCCGTTGTAGGGAGTATTGGCTCGGACAAGGCCGTAGACATCCAGGTGCCGTGCAGTTCAGCGCTTTTATTGTAAGGCTCAGCGATACGCGACCAGAAAACTACGAGACAGCTGGCGAGAGTAAGTGGAGGGTAATCGTATCTACATTACTGCAAGTTCCTGGTCATAAATACCTCTGCAGATTCACGAATTTATTAATAACGGATACAGAGGAGTAGCCATATACGAGAGTATGCTCGGTAGCGAGGAGTGTAAGCGGATTCATGGCACACGGATCGAGTTAGTGGTCTCTAAGAAATAGGACCAGGCCACGAGGATTTGGCGAGGTTGTCAGCGCAACATTTTGTGTGAGTCAAGGGTACGGGATAATAATTTTTGAGGGCGACTTCATCCGGGCGCAAAGTCCCGCGCAATATGTGGTGGCTGTTCGATGCAATTATCACGTTAATTACGGCTGGCGGGTAGGCTTGTCGAATTCAAGAGTAGGAGGGGTCCACCCCTATACACGCGCCTGTGGACTTATTGCGATTTAAACGGAGACACCCTATTCCTACGTCTATGACCGCCCGAATACTGGGGCATCCCGTGTGTTCTTACCTGGAGTATTCTGGTGCGTCAGGGGGGTCGTTCCTTTGAACTCTAAAACTGAGTGCAATCCTGGATGGAGAGGTCCTATGTAGAGTCGCAGGTGGAACGATCCTCGCTTTTCAATTACGTTTTCAAAGCACTATAGGTGGTTGTTACGACTTCGCGCAATCAGTACTTGAGACTGCGGTGTACAAGGTATCCGCCCTGGGTGGGATGTCGGAGAAAATTGAAAAGAAGTTGCATGAAAGCCGAGCACATGAGCCCACGGAGTCTTCCGGCTAGGGGTAGAAAAGTCTTCTCGTGGCATGCCATCCGCTGGCAACGGCAGGCGAAAGCTGATTAGCATGCCGCAAAGAAGACAATCATCAAATACGCCAAAGAGGATTCCAGATACGGTTGCGGAACCTGCGTCTGGAAGATGTCAATGAAACTTGAACAGAATACGGGGCTATCCTAAATGTTCCGGCGAACTCGTCCATAACCATGAACAAGTGGTTACGATGGTGCTCATAATCAGCACCTGTGACTTACTTTACGTATCCATCAGGGATAGCTCTATGTGGACTAGAGGTTACGGACCCATCCATTCGGGGGCCTGATTGACAGGCAGTCTGATCTGGGGGATTTCTAAAAATTCTGGACGAAGAACTCAGCCCGCAGGTACAGTAGCCGGATGATCACCGACGCGAAGGTAAAATAACGCGGTTCTTAATGGACAAAATTGCCCAAGGGACCCGCATCGGTTAGTGCGCCGCAGGATACGATAAATATCTGCACGGCACCACTATTGCCTGAGTAAATTAGTTCGTGCAGCGTTACCTTGGACGTTGAGCAATACGCAAACTCAACCA", 4))))
    # print(init_tasks.approximate_pattern_count( "CAGAATTGTAGACTGATGGGCGTGCCGCCATCGTAGGAGATAGCCGCTTTTGAAACTCCTTTAATACAGATATAGGAGCTACCACGCATTCGATACGTCTTGGCCAATCGCGGTACTTCGAACTGCGTTGTGGTGCTCGCCTACCAGTAGCGGGTAATAGTTTTTCGAACCCTGCGAAAGACATCAAAAACTGGCCGACCGTACAAGTCTGTTTTGATTGTTGATAAAATCCATTTTAGGAGAGCCCGCTGGCTGTGCAATGTGCATTTCTACTATACGAATTCCGCAGAAGGGTGCCCGCTTGCGTCCCTGCCCATCATAAGCGACAGGCTGTTTCGATGTCACTTACGATTGAGGGGTGACAGTTCCTAAAGGGCCTCGGCGGCCGGTTGCACCTCG", "TTGGCCA",2))
    # print(init_tasks.frequent_words_with_mismatches("CTAGAGCTGCTGGAGCTACTACTGCTGGAGGAGGACTGACTCTAGACTCTACTAGAGGCTTCTGCTGCTGCTGGAGGAGCTAGAGGAGCTGGAGCTGGAGCTACTGGACTCTAGACTCTACTGCTACTGCTGGACTGACTCTGGCTTGACTCTGGACTCTAGCTTGCTTGAGGACTGAGGACTGCTTGACTGAGGACTCTACTAGAGCTACTGGCTTCTGCTACTGCTGGACTGACTCTGGAGGACTCTGCTGGACTCTGGACTCTGGCTTGACTGACTGCTTGAGGCTTGACTGAGGAGGACTGAGGAGGCTTGAGGCTTCTGGAGGAGCTGCTGGCTTCTACTAGAGCTAGACTCTGCTGCTGGACTGAGCTAGCTTGACTCTAGACT", 5, 3))
    # print(" ".join(map(str, init_tasks.frequent_words_with_mismatches_and_reverse_complements("CGCGCGCTACGGCCGCCAAAGCCCTCTCGAAAACGCTCTCTCGAAAGCCACGGCCGCCCTACGGCCCTCGCTACGACGAAACTCGCGCTACGGCCCTACGCTAAACGACGAAAGCCCGCTCTCTAAAGCCCGCGCTCGACGGCCCGACGACGAAAAAAACGACGGCCGCCACGCTCTGCCGCCACGACGCTCTAAACGGCCGCCAAACTCTACGGCCCTGCCGCCCTCTGCCCGGCCACGACG", 5, 3))))
    # with open("../resources/salmonella_enterica.fasta") as file:
    #     lines = file.readlines()
    #
    # genome_seq = "".join([line.strip() for line in lines if not line.startswith(">")])
    # dnaa_box_pattern = r"TTATCCACA"
    #
    # print(init_tasks.find_dnaa_box(genome_seq, dnaa_box_pattern))
    # print((" ".join(map(str,init_tasks.neighbors("CCTCCCACG", 3)))))
    # print(init_tasks.skew("GCATACACTTCCCAGTAGGTACTG"))

    # print(len(init_tasks.immediate_neighbors("CCAGTCAATG")))
    # print(init_tasks.approximate_pattern_count("CGTGACAGTGTATGGGCATCTTT", "TGT", 1))
